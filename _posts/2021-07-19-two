---
title: "DataFrame"
date: 2021-07-19 -0400
categories: data Pandas
---
## DataFrame 생성하고 데이터 할당  

```py  
df1 = DataFrame([['Big', [2,3,4], 'Year']])  
```  

## 사전 타입 데이터를 이용하여 DataFrame 생성  

```py  
인구통계 = {'서울': [950, 945, 938.5],  
        '대전':[50, 151, 145],  
        '대구':[85, 88, 92],  
        '부산':[180, 187, 192],  
        '광주':[74, 80, 80]
      }  
df2 = DataFrame(인구통계, index=[2018,2019,2020])  
```  

## DataFrame 속성 조회  
- index: DataFrame의 인덱스를 리스트로 반환  
  
  ```py  
  df2.index  
    
  Out:  
  Int64Index([2018, 2019, 2020], dtype='int64')  
  ```  
  
- columns: DataFrame의 데이터 반환(ndarray)  
  
  ```py  
  df2.values  
    
  Out:  
  array([[950. ,  50. ,  85. , 180. ,  74. ],  
       [945. , 151. ,  88. , 187. ,  80. ],  
       [938.5, 145. ,  92. , 192. ,  80. ]])  
  ```  
  
- shape: 행(row)과 열(column)의 개수(차원)을 Tuple로 반환 
  
  ```py  
  df2.shape  
    
  Out:  
  (3, 5)  
  ```  
- T(Tramspose): 행과 열을 바꾸기  
  
  ```py  
  df2.T  
    
  Out:  
        2018	2019	2020  
  서울	950.0	945.0	938.5  
  대전	50.0	151.0	145.0  
  대구	85.0	88.0	92.0  
  부산	180.0	187.0	192.0  
  광주	74.0	80.0	80.0  
  ```  
- axes: 행과 열 이름을 리스트로 반환  
  
  ```py  
  df2.axes  
    
  Out:  
  [Int64Index([2018, 2019, 2020], dtype='int64'),  
  Index(['서울', '대전', '대구', '부산', '광주'], dtype='object')]  
  ```  
  
- dtypes: 컬럼별 데이터 타입 반환  
  
  ```py  
  df2.dtypes  
    
  Out:  
  서울    float64  
  대전      int64  
  대구      int64  
  부산      int64  
  광주      int64  
  dtype: object  
  ```  
- size: DataFrame의 원소의 개수를 반환  
  
  ```py  
  df2.size  
    
  Out:  
  15  
  ```  
  
## DataFrame 기본 함수  
-info(): 기본 정보 출력  
  
  ```py  
  df2.info()  
    
  Out:  
  <class 'pandas.core.frame.DataFrame'>  
  Int64Index: 3 entries, 2018 to 2020  
  Data columns (total 5 columns):  
   #   Column  Non-Null Count  Dtype   
  ---  ------  --------------  -----  
   0   서울      3 non-null      float64  
   1   대전      3 non-null      int64  
   2   대구      3 non-null      int64  
   3   부산      3 non-null      int64  
   4   광주      3 non-null      int64  
  dtypes: float64(1), int64(4)  
  memory usage: 252.0 bytes  
  ```  
  
- describe(): 기본 통계 정보 출력  

  ```py  
  df2.describe()  
    
  Out:  
          서울	     대전	     대구	      부산	   광주  
  count	3.000000	3.000000	3.000000	3.000000	3.000000  
  mean	944.500000	115.333333	88.333333	186.333333	78.000000  
  std  	5.766281	56.659804	3.511885	6.027714	3.464102  
  min	  938.500000	50.000000	85.000000	180.000000	74.000000  
  25%	  941.750000	97.500000	86.500000	183.500000	77.000000  
  50%	  945.000000	145.000000	88.000000	187.000000	80.000000  
  75%	  947.500000	148.000000	90.000000	189.500000	80.000000  
  max	  950.000000	151.000000	92.000000	192.000000	80.000000  
  ```  
  
- 통계함수(mean, sum, max, min, ...)  

  * ```py  
    df2.mean()  
      
    Out:  
    서울    944.500000  
    대전    115.333333  
    대구     88.333333  
    부산    186.333333  
    광주     78.000000  
    dtype: float64  
    ```  
    
  * ```py  
    df2.max()  
      
    Out:  
    서울    950.0  
    대전    151.0  
    대구     92.0  
    부산    192.0  
    광주     80.0  
    dtype: float64  
    ```  
    
  * ```py  
    df2.quantile(0.6)  
      
    Out:  
    서울    946.0  
    대전    146.2  
    대구     88.8  
    부산    188.0  
    광주     80.0  
    Name: 0.6, dtype: float64  
    ```  
    
- sample(): 일부 데이터를 랜덤으로 선택  
  
  ```py  
  df2.sample()  
  ```  
  
- head(): 맨 앞의 x개의 데이터만 출력  
  
  ```py  
  df2.head()  
  ```  
  
- tail(): 맨 뒤의 x개의 데이터만 출력
  
  ```py  
  df2.tail()  
  ```  
  
- nunique(): unique한 값의 개수  
  
  ```py  
  df2.nunique()  
  
  Out:  
  서울    3  
  대전    3  
  대구    3  
  부산    3  
  광주    2  
  dtype: int64  
  ```  
  
- plot(): 데이터 시각화  
  
  ```py  
  import matplotlib as plt  
  plt.rcParams['font.family'] = 'Malgun Gothic'  
  df2.plot()  
  ```
  ![image]()
- filter(): 원하는 데이터만 선택  
  * ```py  
    df2.filter(['서울'])  
    
    Out:  
           서울  
    2018	950.0  
    2019	945.0  
    2020	938.5  
    ```   
   * ```py  
     # 2018, 2019년 데이터만 선택  
     df3.filter([2018,2019],axis=0)  
     
     Out:  
           서울	  대전	 대구	 부산	 광주  
     2018	 950.0	 50	   85	  180	   74  
     2019	 945.0	 151	 88	  187	   80  
     ```  
     * 정규표현식(어떤 패턴을 정의하고 거기에 맞는것을 선택하는 것) 활용 
       + ```py
         # '울'로 끝나는 컬럼을 모두 선택  
         df3.filter(regex='울$')  
         
         Out:  
               서울  
         2018	950.0  
         2019	945.0  
         2020	938.5  
         ```  
       + ```py  
         # '대'로 시작하는 컬럼을 모두 선택 
         df3.filter(regex='^대')  
         
         Out:  
             대전	대구  
         2018	50	85  
         2019	151	88  
         2020	145	92  
         ``` 
       + ```py  
         # 2010년대 데이터만 선택(2010, 2011, 2012, ..., 2019)  
         df3.filter(regex='^201',axis=0)  
         
         Out:  
         서울	대전	대구	부산	광주  
         2018	950.0	50	85	180	74  
         2019	945.0	151	88	187	80  
         ```  
       + ```py  
         # 10년 단위의 데이터만 선택(1990, 2000, 2010, 2020, ...)  
         df3.filter(regex='0$', axis=0)  
         
         Out:  
         서울	대전	대구	부산	광주  
         2020	938.5	145	92	192	80  
         ```  
 ## DataFrame 조회하시기  
 ```py  
 df4 = DataFrame({'Class': ['IoT','Network', 'Economy','Big Data', 'Cloud'],  
                       'Year': [2018, 2017, 2018, 2018, 2019],  
                       'Price': [100, 125, 132, 312, 250],
                       'Location': ['Korea','Korea', 'Korea', 'US','Korea']},  
                      index=['C01','C02','C03', 'C04', 'C05'])  
```  
- 원하는 열(column)만 조회
  * Class만 조회
  
    + ```py  
      df4['Class']  # 1차원 데이터(Series)가 됨  
      ```  
    + ```py  
      df4.Class  
      ```  
    
  * Class와 Price 조회  
  
    ```py  
    df4[['Class', 'Price']]  
    ```  
    
- 원하는 행(row)만 조회  
  * C03 클래스의 데이터를 선택  
    
    + ```py  
      df4.loc['C03']  
      ```  
    + ```py  
      df4.iloc[2]  
      ```  
    + ```py  
      df4['C03', axis=0]  
      ```  
  * C02, C04 클래스 데이터를 선택
  
    ```py  
    df4.loc['C02', 'C04']  
    ```  
    
- 인덱스 슬라이싱  
 * 02 ~ C04 클래스 데이터 선택  
   
   + ```py  
     df4.loc['C02':'C04']  
     ```  
   + ```py  
     # loc생략 가능 -> 슬라이싱의 경우 자동적으로 로우 인덱스를 색인  
     # 컬럼 인덱스는 순서가 없으므로 슬라이싱 불가  
     df4.['C02':'C04']  
     ```  
- 원하는 행과 열을 선택하여 조회
  * C02, C03 강의의 Class와 Year만 조회
    + ```py  
      df4[['Class','Year']].loc[['C02','C03']]  
      ```  
    + ```py  
      df4.loc['C02':'C03'][['Class','Year']]  
      ```  
    + ```py  
      df4['C02':'C03'][['Class','Year']]  
      ```  
    + ```py  
       df4.loc[['C02','C03']][['Class','Year']]  
      ```
    + ```py  
      df4.loc[['C02','C03'],['Class','Year']]  
      ```  
    + ```py  
      df4.loc['C02':'C03',['Class','Year']]  
      ```  
    + ```py  
      df4.loc['C02':'C03','Class':'Year']  
      ```  
- 조건 색인
  * 가격(Price)이 200 이상인 강의만 선택
    + ```py  
      df4[[False, False,False,True,True]]  
      ```  
    + ```py  
      df4[df4.Price>=200]  
      ```  
      
## 데이터 프레임에 새로운 컬럼 추가

- limitStudent(정원) 컬럼을 추가하고 값을 30으로 저장
  ```py  
  df4['limitStudent']=30  
  ```  
- numStudent(수강학생 수) 컬럼을 추가하고 값을 25, 30, 10, 23, 17로 저장
  ```py  
  df4['numStudent']=[25,30,10,23,17]  
  ```  


나머지는 동영상 보고 
  
